package com.lucasjwilber.freenote.viewmodels

import android.app.Application
import android.util.Log
import androidx.databinding.Bindable
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.lucasjwilber.freenote.*
import com.lucasjwilber.freenote.database.NoteDao
import com.lucasjwilber.freenote.database.NoteDatabase
import com.lucasjwilber.freenote.database.NoteRepository
import com.lucasjwilber.freenote.models.Note
import kotlinx.android.synthetic.main.activity_edit_note.*
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import java.util.*

open class EditNoteViewModel(application: Application): AndroidViewModel(application) {
    val noteRepository: NoteRepository
    var note: LiveData<Note>? = null
    var noteNeedsToBeSaved: Boolean = false
    var noteHasBeenSaved: Boolean = false
    //todo: rename to something more descriptive eg "segmentGetsFocus"
    var titleHasBeenSet: Boolean = false

    init {
        val noteDao: NoteDao = NoteDatabase.getDatabase(application).noteDao()
        // Application context is passed to the repository for shared preferences access:
        noteRepository =
            NoteRepository(
                noteDao,
                application
            )
        Log.i("ljw", "vm init")
    }

    open fun setNote(noteId: Long) {
        note = noteRepository.getNoteById(noteId)
        titleHasBeenSet = true
    }


    fun saveNote(title: String, body: String) {

        val updatedNote = Note(
            // if note is null, use null as the id so that one will be generated by the dao
            if (note?.value == null) null else note?.value?.id,
            NOTE,
            if (title.isEmpty()) "Untitled" else title,
            body,
            Date().time
        )

        GlobalScope.launch(Dispatchers.IO) {
            if (note == null) {
                Log.i("ljw", "saving as new")
                // save a new note
                // insert returns the autogenerated id
                val id = noteRepository.insert(updatedNote)
                Log.i("ljw", "note id is $id")
                setNote(id)
//                setNote(noteRepository.insert(updatedNote))
            } else {
                Log.i("ljw", "updating"+ note?.value?.id)
                noteRepository.update(updatedNote)
            }
            //todo: set flag to show delete option now
            //todo: showToast(this, getString(R.string.saved))
        }

    }


    fun deleteNote() {
        if (note?.value?.id != null) {
            GlobalScope.launch(Dispatchers.IO) {
                Log.i("ljw", "deleting note " + note?.value?.id)
                noteRepository.deleteNoteById(note?.value?.id!!)
            }
        }
    }

}