package com.lucasjwilber.freenote.viewmodels

import android.app.Application
import android.util.Log
import android.widget.EditText
import androidx.lifecycle.MutableLiveData
import com.lucasjwilber.freenote.*
import com.lucasjwilber.freenote.models.Note
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import java.util.*

class EditListViewModel(application: Application): BaseViewModel(application) {

    val SEGMENT_DELIMITER = "|{]"
    val STRIKE_THROUGH_INDICATOR = "[}|"
    override var note: Note = Note(
        null,
        LIST,
        "",
        "",
        Date().time
    )
    class DeletedSegment(val position: Int, val text: String)

    // segments is updated in the observer in EditNoteActivity
//    var segments: MutableLiveData<List<String>> = MutableLiveData()
    var segments = ArrayList<String>()
    var deletedSegments: MutableLiveData<Stack<DeletedSegment>> = MutableLiveData()
    var newSegmentText: MutableLiveData<String> = MutableLiveData()

    init {
//        segments.value = ArrayList<String>()
        deletedSegments.value = Stack<DeletedSegment>()
    }

    override fun saveNote() {

        note.segments = segments.joinToString(SEGMENT_DELIMITER)

        Log.i("ljw", "saving note ${note.id}")
        GlobalScope.launch(Dispatchers.IO) {
            if (note.id == null) { // save a new note
                // insert returns the autogenerated id
                note.id = noteRepository.insert(note)
            } else {
                noteRepository.update(note)
            }
            //todo: showToast(this, getString(R.string.saved))
        }
    }

}